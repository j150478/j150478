<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="2535" />
    <option name="newTranslationDialogY" value="493" />
    <histories>
      <item value="Clean" />
      <item value="断开&#10;" />
      <item value="isMapping" />
      <item value="isMa" />
      <item value="isMaoo" />
      <item value="is" />
      <item value="销毁" />
      <item value="xiao'hui" />
      <item value="xia" />
      <item value="revoke&#10;" />
      <item value="re" />
      <item value="handle&#10;" />
      <item value="ha " />
      <item value="Batch" />
      <item value="make net Association" />
      <item value="make n Association" />
      <item value="make Ntw Association" />
      <item value="make NtwAssociation" />
      <item value="makeNtwAssociation" />
      <item value="建立关联" />
      <item value="建立关联&#10;" />
      <item value="j" />
      <item value="常量" />
      <item value="常liang" />
      <item value="常亮" />
      <item value="chang'liang" />
      <item value="敞亮" />
      <item value="c" />
      <item value="docking&#10;" />
      <item value="ONE_HOUR" />
      <item value="roomReservations" />
      <item value="close&#10;" />
      <item value="trash" />
      <item value="订正" />
      <item value="din" />
      <item value="Detail" />
      <item value="multiply" />
      <item value="divide" />
      <item value="收入" />
      <item value="reserve" />
      <item value="If the specified key is not already associated with a value (or is mapped to {@code null}), attempts to compute its value using the given mapping function and enters it into this map unless {@code null}. &lt;p&gt;If the function returns {@code null} no mapping is recorded. If the function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: &lt;pre&gt; {@code map.computeIfAbsent(key, k -&gt; new Value(f(k))); }&lt;pre&gt; &lt;p&gt;Or to implement a multi-value map, {@code Map&lt;K,Collection&lt;V&gt;&gt;}, supporting multiple values per key: &lt;pre&gt; {@code map.computeIfAbsent(key, k -&gt; new HashSet&lt;V&gt;()).add(v); }&lt;pre&gt; @implSpec The default implementation is equivalent to the following steps for this {@code map}, then returning the current value or {@code null} if now absent: &lt;pre&gt; {@code if (map.get(key) == null) { V newValue = mappingFunction.apply(key); if (newValue != null) map.put(key, newValue); } }&lt;pre&gt; &lt;p&gt;The default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties. In particular, all implementations of subinterface {@link java.util.concurrent.ConcurrentMap} must document whether the function is applied once atomically only if the value is not present. @param key key with which the specified value is to be associated @param mappingFunction the function to compute a value @return the current (existing or computed) value associated with the specified key, or null if the computed value is null @throws NullPointerException if the specified key is null and this map does not support null keys, or the mappingFunction is null @throws UnsupportedOperationException if the {@code put} operation is not supported by this map (&lt;a href=&quot;{@docRoot}javautilCollection.htmloptional-restrictions&quot;&gt;optional&lt;a&gt;) @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map (&lt;a href=&quot;{@docRoot}javautilCollection.htmloptional-restrictions&quot;&gt;optional&lt;a&gt;) @since 1.8" />
      <item value="Returns the number of elements in this set (its cardinality). If this set contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;tt&gt; elements, returns &lt;tt&gt;Integer.MAX_VALUE&lt;tt&gt;. @return the number of elements in this set (its cardinality)" />
      <item value="An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value. &lt;p&gt;This interface takes the place of the &lt;tt&gt;Dictionary&lt;tt&gt; class, which was a totally abstract class rather than an interface. &lt;p&gt;The &lt;tt&gt;Map&lt;tt&gt; interface provides three &lt;i&gt;collection views&lt;i&gt;, which allow a map's contents to be viewed as a set of keys, collection of values, or set of key-value mappings. The &lt;i&gt;order&lt;i&gt; of a map is defined as the order in which the iterators on the map's collection views return their elements. Some map implementations, like the &lt;tt&gt;TreeMap&lt;tt&gt; class, make specific guarantees as to their order; others, like the &lt;tt&gt;HashMap&lt;tt&gt; class, do not. &lt;p&gt;Note: great care must be exercised if mutable objects are used as map keys. The behavior of a map is not specified if the value of an object is changed in a manner that affects &lt;tt&gt;equals&lt;tt&gt; comparisons while the object is a key in the map. A special case of this prohibition is that it is not permissible for a map to contain itself as a key. While it is permissible for a map to contain itself as a value, extreme caution is advised: the &lt;tt&gt;equals&lt;tt&gt; and &lt;tt&gt;hashCode&lt;tt&gt; methods are no longer well defined on such a map. &lt;p&gt;All general-purpose map implementation classes should provide two &quot;standard&quot; constructors: a void (no arguments) constructor which creates an empty map, and a constructor with a single argument of type &lt;tt&gt;Map&lt;tt&gt;, which creates a new map with the same key-value mappings as its argument. In effect, the latter constructor allows the user to copy any map, producing an equivalent map of the desired class. There is no way to enforce this recommendation (as interfaces cannot contain constructors) but all of the general-purpose map implementations in the JDK comply. &lt;p&gt;The &quot;destructive&quot; methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw &lt;tt&gt;UnsupportedOperationException&lt;tt&gt; if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an &lt;tt&gt;UnsupportedOperationException&lt;tt&gt; if the invocation would have no effect on the map. For example, invoking the {@link putAll(Map)} method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be &quot;superimposed&quot; is empty. &lt;p&gt;Some map implementations have restrictions on the keys and values they may contain. For example, some implementations prohibit null keys and values, and some have restrictions on the types of their keys. Attempting to insert an ineligible key or value throws an unchecked exception, typically &lt;tt&gt;NullPointerException&lt;tt&gt; or &lt;tt&gt;ClassCastException&lt;tt&gt;. Attempting to query the presence of an ineligible key or value may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible key or value whose completion would not result in the insertion of an ineligible element into the map may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as &quot;optional&quot; in the specification for this interface. &lt;p&gt;Many methods in Collections Framework interfaces are defined in terms of the {@link Objectequals(Object) equals} method. For example, the specification for the {@link containsKey(Object) containsKey(Object key)} method says: &quot;returns &lt;tt&gt;true&lt;tt&gt; if and only if this map contains a mapping for a key &lt;tt&gt;k&lt;tt&gt; such that &lt;tt&gt;(key==null ? k==null : key.equals(k))&lt;tt&gt;.&quot; This specification should &lt;i&gt;not&lt;i&gt; be construed to imply that invoking &lt;tt&gt;Map.containsKey&lt;tt&gt; with a non-null argument &lt;tt&gt;key&lt;tt&gt; will cause &lt;tt&gt;key.equals(k)&lt;tt&gt; to be invoked for any key &lt;tt&gt;k&lt;tt&gt;. Implementations are free to implement optimizations whereby the &lt;tt&gt;equals&lt;tt&gt; invocation is avoided, for example, by first comparing the hash codes of the two keys. (The {@link ObjecthashCode()} specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying {@link Object} methods wherever the implementor deems it appropriate. &lt;p&gt;Some map operations which perform recursive traversal of the map may fail with an exception for self-referential instances where the map directly or indirectly contains itself. This includes the {@code clone()}, {@code equals()}, {@code hashCode()} and {@code toString()} methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so. &lt;p&gt;This interface is a member of the &lt;a href=&quot;{@docRoot}..technotesguidescollectionsindex.html&quot;&gt; Java Collections Framework&lt;a&gt;." />
      <item value="An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value." />
      <item value="Map" />
      <item value="Reservation" />
      <item value="vReservation" />
      <item value="FALIED" />
      <item value="FALI" />
      <item value="listing" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="9" />
        <entry key="ENGLISH" value="10" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1616503205330" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>